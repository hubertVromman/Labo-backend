// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFramework.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241008083113_Labo3")]
    partial class Labo3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityFramework.Entities.Auteur", b =>
                {
                    b.Property<int>("AuteurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuteurId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuteurId");

                    b.ToTable("auteurs");
                });

            modelBuilder.Entity("EntityFramework.Entities.Bibliotheque", b =>
                {
                    b.Property<int>("BibliothequeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BibliothequeId"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeroTelephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BibliothequeId");

                    b.ToTable("bibliotheques");

                    b.HasData(
                        new
                        {
                            BibliothequeId = -1,
                            Adresse = "Rue du Paradis, 5 1400 Nivelles",
                            Nom = "Librairie Georges",
                            NumeroTelephone = "+32 68 36 72 98"
                        });
                });

            modelBuilder.Entity("EntityFramework.Entities.Emprunt", b =>
                {
                    b.Property<int>("EmpruntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpruntId"));

                    b.Property<int>("BibliothequeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateDebut")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateFin")
                        .HasColumnType("date");

                    b.Property<int>("EmprunteurId")
                        .HasColumnType("int");

                    b.HasKey("EmpruntId");

                    b.HasIndex("BibliothequeId");

                    b.HasIndex("EmprunteurId");

                    b.ToTable("emprunts");
                });

            modelBuilder.Entity("EntityFramework.Entities.EmpruntLivre", b =>
                {
                    b.Property<int>("EmpruntId")
                        .HasColumnType("int");

                    b.Property<int>("LivreId")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.HasKey("EmpruntId", "LivreId");

                    b.HasIndex("LivreId");

                    b.ToTable("emprunLivres");
                });

            modelBuilder.Entity("EntityFramework.Entities.Livre", b =>
                {
                    b.Property<int>("LivreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LivreId"));

                    b.Property<DateOnly>("DateParution")
                        .HasColumnType("date");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixVente")
                        .HasColumnType("DECIMAL(9, 2)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LivreId");

                    b.HasIndex("ISBN")
                        .IsUnique();

                    b.ToTable("livres");
                });

            modelBuilder.Entity("EntityFramework.Entities.LivreAuteur", b =>
                {
                    b.Property<int>("LivreId")
                        .HasColumnType("int");

                    b.Property<int>("AuteurId")
                        .HasColumnType("int");

                    b.HasKey("LivreId", "AuteurId");

                    b.HasIndex("AuteurId");

                    b.ToTable("livreAuteurs");
                });

            modelBuilder.Entity("EntityFramework.Entities.StockLivre", b =>
                {
                    b.Property<int>("LivreId")
                        .HasColumnType("int");

                    b.Property<int>("BibliothequeId")
                        .HasColumnType("int");

                    b.Property<int>("StockAchat")
                        .HasColumnType("int");

                    b.Property<int>("StockLocation")
                        .HasColumnType("int");

                    b.HasKey("LivreId", "BibliothequeId");

                    b.HasIndex("BibliothequeId");

                    b.ToTable("stockLivres");
                });

            modelBuilder.Entity("EntityFramework.Entities.Utilisateur", b =>
                {
                    b.Property<int>("UtilisateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UtilisateurId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UtilisateurId");

                    b.ToTable("utilisateurs");
                });

            modelBuilder.Entity("EntityFramework.Entities.Vente", b =>
                {
                    b.Property<int>("VenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenteId"));

                    b.Property<int>("AcheteurId")
                        .HasColumnType("int");

                    b.Property<int>("BibliothequeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateVente")
                        .HasColumnType("date");

                    b.HasKey("VenteId");

                    b.HasIndex("AcheteurId");

                    b.HasIndex("BibliothequeId");

                    b.ToTable("ventes");
                });

            modelBuilder.Entity("EntityFramework.Entities.VenteLivre", b =>
                {
                    b.Property<int>("VenteId")
                        .HasColumnType("int");

                    b.Property<int>("LivreId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixVente")
                        .HasColumnType("DECIMAL(9, 2)");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.HasKey("VenteId", "LivreId");

                    b.HasIndex("LivreId");

                    b.ToTable("venteLivres");
                });

            modelBuilder.Entity("EntityFramework.Entities.Emprunt", b =>
                {
                    b.HasOne("EntityFramework.Entities.Bibliotheque", "Bibliotheque")
                        .WithMany("Emprunts")
                        .HasForeignKey("BibliothequeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Emprunt_Bibliotheque");

                    b.HasOne("EntityFramework.Entities.Utilisateur", "Emprunteur")
                        .WithMany("Emprunts")
                        .HasForeignKey("EmprunteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Emprunt_Utilisateur");

                    b.Navigation("Bibliotheque");

                    b.Navigation("Emprunteur");
                });

            modelBuilder.Entity("EntityFramework.Entities.EmpruntLivre", b =>
                {
                    b.HasOne("EntityFramework.Entities.Emprunt", "Emprunt")
                        .WithMany("EmpruntLivre")
                        .HasForeignKey("EmpruntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmpruntLivre_Emprunt");

                    b.HasOne("EntityFramework.Entities.Livre", "Livre")
                        .WithMany("EmpruntLivre")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EmpruntLivre_Livre");

                    b.Navigation("Emprunt");

                    b.Navigation("Livre");
                });

            modelBuilder.Entity("EntityFramework.Entities.LivreAuteur", b =>
                {
                    b.HasOne("EntityFramework.Entities.Auteur", "Auteur")
                        .WithMany("LivreAuteur")
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LivreAuteur_Auteur");

                    b.HasOne("EntityFramework.Entities.Livre", "Livre")
                        .WithMany("LivreAuteur")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LivreAuteur_Livre");

                    b.Navigation("Auteur");

                    b.Navigation("Livre");
                });

            modelBuilder.Entity("EntityFramework.Entities.StockLivre", b =>
                {
                    b.HasOne("EntityFramework.Entities.Bibliotheque", "Bibliotheque")
                        .WithMany("StockLivre")
                        .HasForeignKey("BibliothequeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StockLivre_Bibliotheque");

                    b.HasOne("EntityFramework.Entities.Livre", "Livre")
                        .WithMany("StockLivre")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StockLivre_Livre");

                    b.Navigation("Bibliotheque");

                    b.Navigation("Livre");
                });

            modelBuilder.Entity("EntityFramework.Entities.Vente", b =>
                {
                    b.HasOne("EntityFramework.Entities.Utilisateur", "Acheteur")
                        .WithMany("Achats")
                        .HasForeignKey("AcheteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Vente_Utilisateur");

                    b.HasOne("EntityFramework.Entities.Bibliotheque", "Bibliotheque")
                        .WithMany("Ventes")
                        .HasForeignKey("BibliothequeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Vente_Bibliotheque");

                    b.Navigation("Acheteur");

                    b.Navigation("Bibliotheque");
                });

            modelBuilder.Entity("EntityFramework.Entities.VenteLivre", b =>
                {
                    b.HasOne("EntityFramework.Entities.Livre", "Livre")
                        .WithMany("VenteLivre")
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VenteLivre_Livre");

                    b.HasOne("EntityFramework.Entities.Vente", "Vente")
                        .WithMany("VenteLivre")
                        .HasForeignKey("VenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VenteLivre_Emprunt");

                    b.Navigation("Livre");

                    b.Navigation("Vente");
                });

            modelBuilder.Entity("EntityFramework.Entities.Auteur", b =>
                {
                    b.Navigation("LivreAuteur");
                });

            modelBuilder.Entity("EntityFramework.Entities.Bibliotheque", b =>
                {
                    b.Navigation("Emprunts");

                    b.Navigation("StockLivre");

                    b.Navigation("Ventes");
                });

            modelBuilder.Entity("EntityFramework.Entities.Emprunt", b =>
                {
                    b.Navigation("EmpruntLivre");
                });

            modelBuilder.Entity("EntityFramework.Entities.Livre", b =>
                {
                    b.Navigation("EmpruntLivre");

                    b.Navigation("LivreAuteur");

                    b.Navigation("StockLivre");

                    b.Navigation("VenteLivre");
                });

            modelBuilder.Entity("EntityFramework.Entities.Utilisateur", b =>
                {
                    b.Navigation("Achats");

                    b.Navigation("Emprunts");
                });

            modelBuilder.Entity("EntityFramework.Entities.Vente", b =>
                {
                    b.Navigation("VenteLivre");
                });
#pragma warning restore 612, 618
        }
    }
}
